'use strict';

const ans = 'AnNa';

const reg = /n/ig;

//Метод search() выполняет поиск сопоставления между регулярным выражением и строкой.
ans.search(reg); // выведет позицию буквы, пример 1

//Метод match() возвращает получившиеся совпадения при сопоставлении строки с регулярным выражением.
ans.match(reg); // Выведет масив с найденными буквами ["n", "N", "n"]

//===флаги...
// i = не зависить от регистра
// g = найти все вхождения / не работает с search()
// m = многострочный режим

//===спецсимволы
// . = берем все элементы которые попадут в строку
// \ = экранировать

//===Классы
// \d = искать цифры
// \w = искать буквы
// \s = искать пробелы

//===обратные классы
// \D = искать не цифры
// \W = искать не буквы

// =================================================
// replace + reg exp
// =================================================

const pass = '546385';

//Метод replace() возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель
pass.replace(/./g, '*'); // ******

//убрать все дефисы
const tel = '12-89-45';
tel.replace(/-/g, ''); // 128945

// =================================================
// test
// =================================================

//true если есть совпадения иначе false
const names = 'Sasha';
const namesReg = /sha/ig;
namesReg.test(names); // true

// =================================================
// Классы
// =================================================

//Искать только цифры
const num = 'dnr46j88.';
const numExp = /\d/g;
num.match(numExp); // ["4", "6", "8", "8"]

//=============вырезать имя
const str = 'My name is R2D2';
str.match(/\w\d\w\d/i); //["R2D2", index: 11, input: "My name is R2D2", groups: undefined]

// =================================================
// Обратные классы
// =================================================

//искать не цыфры
console.log(str.match(/\D/ig)); //["M", "y", " ", "n", "a", "m", "e", " ", "i", "s", " ", "R", "D"]
